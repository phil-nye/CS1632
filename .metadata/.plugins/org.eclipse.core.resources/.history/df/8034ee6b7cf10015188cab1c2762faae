import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Random;

import org.junit.Before;
import org.junit.Test;

public class JavaArraysTests {

	int intArr[][];
    
    //Generate 100 random int arrays
    private void createArrays() {
        Random rndm = new Random();
        intArr = new int[100][];	//100 int arrays
        int length;
        for(int i = 0; i < 100; i++) {
            length = rndm.nextInt(10000) + 1;    //length should be between 1 and 10,000
            System.out.println("Length: " + length);
            intArr[i] = new int[length];
            for(int j = 0; j < length; j++) {
                intArr[i][j] = rndm.nextInt(100000) + 1;  //generate a random number between 1 and 100,000
            }
        }
        System.out.println("END\n");
    }

    //Setup randomly generated arrays
    @Before
    public void setup() {
        createArrays();
    }
    
    // Test array sort: size before sorting should be the same
    // as the size after sorting
    @Test
    public void sortSizeTest() {
        for(int i = 0; i < intArr.length; i++) {
        	int originalCopy[] = Arrays.copyOf(intArr[i], intArr[i].length);	//create deep copy of original
        	Arrays.sort(intArr[i]);	//sort array
        	
        	assertEquals(originalCopy.length, intArr[i].length);
        }
    }

    // Test array sort: all elements in the unsorted array should
    // appear in the sorted array (just in a different order)
    @Test
    public void sortSameContentsTest() {
    	for(int i = 0; i < intArr.length; i++) {
    		int originalCopy[] = Arrays.copyOf(intArr[i], intArr[i].length);	//create deep copy of original
    		Arrays.sort(intArr[i]);	//sort array
    		
    		for(int j = 0; j < originalCopy.length; j++) {	//compare elements in original can be found in sorted array
    			if(Arrays.binarySearch(intArr[i], originalCopy[j]) < 0) {
    				fail("sortSameContentsTest");
    			}
    			//else if(i == 2) fail("test");
    			else {
    				assertTrue(true);
    			}
    		}
    	}
    }
}
































